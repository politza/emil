;; -*- mode: emacs-lisp; lexical-binding: t -*-

(require 'Emil/Env)

(Emil:Env:declare-functions 
  (-each . (-> ((List 'a) (-> ('a) Void)) Void))
  (-each-indexed . (-> ((List 'a) (-> (integer 'a) Void)) Void))
  (-each-while . (-> ((List 'a) (-> ('a) Any) (-> ('a) Void)) Void))
  (-each-r . (-> ((List 'a) (-> ('a) Void)) Void))
  (-each-r-while . (-> ((List 'a) (-> ('a) Any) (-> ('a) Void)) Void))
  (-dotimes . (-> (integer (-> (integer) Void)) Void))
  (-map . (-> ((-> ('a) 'b) (List 'a)) (List 'b)))
  (-reduce-from . (-> ((-> ('a 'b) 'a) 'a (List 'b)) 'a))
  (-reduce . (-> ((-> (&optional 'a 'a) 'a) (List 'a)) 'a))
  (-reduce-r-from . (-> ((-> ('a 'b) 'a) 'a (List 'b)) 'a))
  (-reduce-r . (-> ((-> (&optional 'a 'a) 'a) (List 'a)) 'a))
  (-reductions-from . (-> ((-> ('a 'b) 'a) 'a (List 'b)) (List 'a)))
  (-reductions . (-> ((-> (&optional 'a 'a) 'a) (List 'a)) (List 'a)))
  (-reductions-r-from . (-> ((-> ('a 'b) 'a) 'a (List 'b)) (List 'a)))
  (-reductions-r . (-> ((-> (&optional 'a 'a) 'a) (List 'a)) (List 'a)))
  (-filter . (-> ((-> ('a) Any) (List 'a)) (List 'a)))
  (-remove . (-> ((-> ('a) Any) (List 'a)) (List 'a)))
  (-remove-first . (-> ((-> ('a) Any) (List 'a)) (List 'a)))
  (-remove-last . (-> ((-> ('a) Any) (List 'a)) (List 'a)))
  (-keep . (-> ((-> ('a) 'b) (List 'a)) (List 'b)))
  (-non-nil . (-> ((List 'a)) (List 'a)))
  (-map-indexed . (-> ((-> (integer 'a) 'b) (List 'a)) (List 'b)))
  (-map-when . (-> ((-> ('a) Any) (-> ('a) 'a) (List 'a)) (List 'a)))
  (-map-first . (-> ((-> ('a) Any) (-> ('a) 'a) (List 'a)) (List 'a)))
  (-map-last . (-> ((-> ('a) Any) (-> ('a) 'a) (List 'a)) (List 'a)))
  (-replace . (-> ('a 'a (List 'a)) (List 'a)))
  (-replace-first . (-> ('a 'a (List 'a)) (List 'a)))
  (-replace-last . (-> ('a 'a (List 'a)) (List 'a)))
  (-mapcat . (-> ((-> ('a) (List 'b)) (List 'a)) (List 'b)))
  (-iterate . (-> ((-> ('a) 'a) 'a integer) 'a))
  (-flatten . (-> (list) list))
  (-flatten-n . (-> (list) list))
  (-splice . (-> ((-> ('a) Any) (-> ('a) (List 'a)) (List 'a)) (List 'a)))
  (-splice-list . (-> ((-> ('a) Any) (List 'a) (List 'a)) (List 'a)))
  (-cons* . (-> (&rest Any) list))
  (-snoc . (-> ((List 'a) 'a &rest 'a) (List 'a)))
  (-first . (-> ((-> ('a) Any) (List 'a)) 'a))
  (-some . (-> ((-> ('a) 'b) (List 'a)) 'b))
  (-every . (-> ((-> ('a) Any) (List 'a)) boolean))
  (-last . (-> ((-> ('a) Any) (List 'a)) 'a))
  (-fifth-item . (-> ((List 'a)) 'a))
  (-last-item . (-> ((List 'a)) 'a))
  (-butlast . (-> ((List 'a)) (List 'a)))
  (-count . (-> ((-> ('a) Any) (List 'a)) integer))
  (-any? . (-> ((-> ('a) Any) (List 'a)) boolean))
  (-all? . (-> ((-> ('a) Any) (List 'a)) boolean))
  (-none? . (-> ((-> ('a) Any) (List 'a)) boolean))
  (-only-some? . (-> ((-> ('a) Any) (List 'a)) boolean))
  (-slice . (-> ((List 'a) integer &optional integer integer)
                (List 'a)))
  (-take-while . (-> ((-> ('a) Any) (List 'a)) (List 'a)))
  (-drop-while . (-> ((-> ('a) Any) (List 'a)) (List 'a)))
  (-take . (-> (integer (List 'a)) (List 'a)))
  (-take-last . (-> (integer (List 'a)) (List 'a)))
  (-drop-last . (-> (integer (List 'a)) (List 'a)))
  (-split-at . (-> (integer (List 'a)) (List (List 'a))))
  (-rotate . (-> (integer (List 'a)) (List 'a)))
  (-insert-at . (-> (integer 'a (List 'a)) (List 'a)))
  (-replace-at . (-> (integer 'a (List 'a)) (List 'a)))
  (-update-at . (-> (integer (-> ('a) 'a) (List 'a)) (List 'a)))
  (-remove-at . (-> (integer (List 'a)) (List 'a)))
  (-remove-at-indices . (-> ((List integer) (List 'a)) (List 'a)))
  (-split-with . (-> ((-> ('a) Any) (List 'a))
                     (List (List 'a))))
  (-split-when . (-> ((-> ('a) Any) (List 'a))
                     (List (List 'a))))
  (-separate . (-> ((-> ('a) Any) (List 'a))
                   (List (List 'a))))
  (-partition-all-in-steps . (-> (integer integer (List 'a))
                                 (List (List 'a))))
  (-partition-in-steps . (-> (integer integer (List 'a))
                             (List (List 'a))))
  (-partition-all . (-> (integer (List 'a)) (List (List 'a))))
  (-partition . (-> (integer (List 'a)) (List (List 'a))))
  (-partition-by . (-> ((-> ('a) Any) (List 'a)) (List (List 'a))))
  (-partition-by-header . (-> ((-> ('a) Any) (List 'a))
                              (List (List 'a))))
  (-partition-after-pred . (-> ((-> ('a) Any) (List 'a))
                               (List (List 'a))))
  (-partition-before-pred . (-> ((-> ('a) Any) (List 'a))
                                (List (List 'a))))
  (-partition-after-item . (-> ((-> ('a) Any) (List 'a))
                               (List (List 'a))))
  (-partition-before-item . (-> ((-> ('a) Any) (List 'a))
                                (List (List 'a))))
  (-group-by . (-> ((-> ('a) 'b) (List 'a))
                   (List (Cons 'b (List 'a)))))
  (-interpose . (-> ('a (List 'a)) (List 'a)))
  (-interleave . (-> (&rest (List 'a)) (List 'a)))
  (-zip-with . (-> ((-> ('a 'b) 'c) (List 'a) (List 'b)) (List 'c)))
  (-zip-lists . (-> (&rest (List 'a)) (List (List 'a))))
  (-zip-lists-fill . (-> ('a &rest (List 'a)) (List (List 'a))))
  (-unzip-lists . (-> ((List (List 'a))) (List (List 'a))))
  (-zip . (-> (&rest list) list))
  (-zip-pair . (-> ((List 'a) (List 'b)) (List (Cons 'a 'b))))
  (-zip-fill . (-> (Any &rest list) list))
  (-unzip . (-> ((List list)) list))
  (-cycle . (-> ((List 'a)) (List 'a)))
  (-pad . (-> ('a &rest (List 'a)) (List (List 'a))))
  (-annotate . (-> ((-> ('a) 'b) (List 'a)) (List (Cons 'b 'a))))
  (-table . (-> (&rest Any) Any))
  (-table-flat . (-> (&rest Any) Any))
  (-find-index . (-> ((-> ('a) Any) (List 'a)) integer))
  (-elem-index . (-> ('a (List 'a)) integer))
  (-find-indices . (-> ((-> ('a) Any) (List 'a)) (List integer)))
  (-elem-indices . (-> ('a (List 'a)) (List integer)))
  (-find-last-index . (-> ((-> ('a) Any) (List 'a)) integer))
  (-select-by-indices . (-> ((List integer) (List 'a)) (List 'a)))
  (-select-columns . (-> ((List integer) (List (List 'a)))
                         (List (List 'a))))
  (-select-column . (-> (integer (List (List 'a)))
                        (List (List 'a))))
  (-grade-up . (-> ((-> ('a 'a) Any) (List 'a)) (List integer)))
  (-grade-down . (-> ((-> ('a 'a) Any) (List 'a)) (List integer)))
  (-distinct . (-> ((List 'a)) (List 'a)))
  (-union . (-> ((List 'a) (List 'a)) (List 'a)))
  (-intersection . (-> ((List 'a) (List 'a)) (List 'a)))
  (-difference . (-> ((List 'a) (List 'a)) (List 'a)))
  (-powerset . (-> ((List 'a)) (List (List 'a))))
  (-frequencies . (-> ((List 'a)) (List (Cons 'a integer))))
  (-permutations . (-> ((List 'a)) (List (List 'a))))
  (-inits . (-> ((List 'a)) (List 'a)))
  (-tails . (-> ((List 'a)) (List 'a)))
  (-common-prefix . (-> (&rest (List 'a)) (List 'a)))
  (-common-suffix . (-> (&rest (List 'a)) (List 'a)))
  (-contains? . (-> ((List 'a) 'a) boolean))
  (-same-items? . (-> ((List 'a) (List 'b)) boolean))
  (-is-prefix? . (-> ((List 'a) (List 'b)) boolean))
  (-is-suffix? . (-> ((List 'a) (List 'b)) boolean))
  (-is-infix? . (-> ((List 'a) (List 'b)) boolean))
  (-sort . (-> ((-> ('a 'a) Any) (List 'a)) (List 'a)))
  (-list . (-> (Any) list))
  (-repeat . (-> (integer 'a) (List 'a)))
  (-sum . (-> ((List number)) number))
  (-running-sum . (-> ((List number)) (List number)))
  (-product . (-> ((List number)) number))
  (-running-product . (-> ((List number)) (List number)))
  (-max . (-> ((List number)) number))
  (-min . (-> ((List number)) number))
  (-max-by . (-> ((-> ('a 'a) Any) (List 'a)) 'a))
  (-min-by . (-> ((-> ('a 'a) Any) (List 'a)) 'a))
  (-iota . (-> (number &optional number number) (List number)))
  (-fix . (-> ((-> ('a) 'a) 'a) 'a))
  (-unfold . (-> ((-> ('a) 'a) 'a) 'a))
  (-cons-pair? . (-> (Any) boolean))
  (-cons-to-list . (-> ((Cons 'a 'a)) (List 'a)))
  (-value-to-list . (-> (&rest Any) list))
  (-tree-mapreduce-from . (-> (&rest Any) Any))
  (-tree-mapreduce . (-> (&rest Any) Any))
  (-tree-map . (-> (&rest Any) Any))
  (-tree-reduce-from . (-> (&rest Any) Any))
  (-tree-reduce . (-> (&rest Any) Any))
  (-tree-map-nodes . (-> (&rest Any) Any))
  (-tree-seq . (-> (&rest Any) Any))
  (-clone . (-> ((List 'a)) (List 'a)))
  (-rpartial . (-> (&rest Any) Any))
  (-juxt . (-> (&rest Any) Any))
  (-compose . (-> (&rest Any) Any))
  (-applify . (-> (&rest Any) Any))
  (-on . (-> (&rest Any) Any))
  (-flip . (-> (&rest Any) Any))
  (-rotate-args . (-> (&rest Any) Any))
  (-const . (-> ('a) (-> (&rest Any) 'a)))
  (-not . (-> ((-> ('a) Any)) (-> ('a) boolean)))
  (-orfn . (-> (&rest (-> (&rest Any) Any)) (-> (&rest Any) Any)))
  (-andfn . (-> (&rest (-> (&rest Any) Any)) (-> (&rest Any) Any)))
  (-iteratefn . (-> ((-> ('a) 'a) integer) (-> ('a) 'a)))
  (-counter . (-> (&optional number number number) (-> () number)))
  (-fixfn . (-> (&rest Any) Any))
  (-prodfn . (-> (&rest Any) Any)))

(Emil:Env:declare-aliases
  (-select . -filter)
  (-reject . -remove)
  (-reject-first . -remove-first)
  (-reject-last . -remove-last)
  ;; (-remove-item . remove)
  (-replace-where . -map-when)
  (-concat . append)
  (-copy . copy-sequence)
  (-find . -first)
  (-any . -some)
  ;; (-first-item . car)
  ;; (-second-item . cadr)
  ;; (-third-item . caddr)
  ;; (-fourth-item . cadddr)
  (-some? . -any?)
  (-any-p . -any?)
  (-some-p . -any?)
  (-every? . -all?)
  (-all-p . -all?)
  (-every-p . -all?)
  (-none-p . -none?)
  (-only-some-p . -only-some?)
  (-drop . nthcdr)
  (-uniq . -distinct)
  (-contains-p . -contains?)
  (-same-items-p . -same-items?)
  (-is-prefix-p . -is-prefix?)
  (-is-suffix-p . -is-suffix?)
  (-is-infix-p . -is-infix?)
  (-cons-pair-p . -cons-pair?)
  ;; (-partial . apply-partially)
  )

(provide 'Emil/Types/dash)
